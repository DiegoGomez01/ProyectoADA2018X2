OpCond -> < | > | <= | >= | = | <>
MathOp -> + | - | * | / | div | mod | ^
Conectores -> or, and
Negador -> not
IncDec -> inc | dec
Programa -> Inicio Id ((Parametros(,Parametros)*)?) VarDeclaracion* {Instrucciones}
Inicio -> procedure | function Tipo
Modo -> E | S | ES
Tipo -> boolean | int | float | char
Parametros -> Modo Tipo Id OpArray?
VarDeclaration -> var Tipo OpArray? Id (,Id)*
OpArray -> [numero* | OpMatematicas* | Id*] 								// A[] <- 1 
Instrucciones -> (Asignaciones* | typeCondiciones* | typeCiclos* | OpMatematicas* | Comentarios*)*	//Llamar recursivamente
Asignaciones -> Id OpArray? <- Digito | Numero | Id OpArray? | "Id" | OpMatematicas | Booleano
TypeCondiciones -> Si | SiEntonces | Switch
Condicion -> (Id OpArray? | Digito | numero | float | Booleano) OpCond (Id OpArray? | Digito | numero | float | Booleano)
Condiciones -> Negador? Condicion (Conectores Negador? Condicion)*
Si -> if(Condiciones) then Instrucciones endif
SiEntonces -> if(Condiciones) then Instrucciones else Instrucciones endif
Valores -> Id | "Id" | Digito | numero | float : Instrucciones
Default -> default : Instrucciones
Switch -> case of Id Valores+ Default? endcase
typeCiclos -> While | For | ForIncDec | Repeat
While -> while (Condiciones) do Instrucciones endwhile
Repeat -> repeat Instrucciones until (Condiciones);
For -> for(Id <- Numero | Id | OpMatematicas to Numero | Id | OpMatematicas) do Instrucciones endfor
ForIncDec -> for(Id <- Numero | Id | OpMatematicas to Numero | Id | OpMatematicas IncDec Numero) do Instrucciones endfor
OpMatematicas -> Id OpArray? | Digito | Numero | Float MathOp Id OpArray? | Digito | Numero | Float // mirar mas operaciones

