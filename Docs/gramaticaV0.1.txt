/*Cualquier caracter*/
SourceCharacter -> .

/*SeparaciÃ³n*/
__ -> (WhiteSpace | LineTerminator | Comment)*
_f -> _ LineTerminator __
_ -> (WhiteSpace | Comment)*
WhiteSpace -> "\t" | "\v" | "\f" | " " | "\u00A0" | "\uFEFF"
LineTerminator -> "\n" | "\r\n" | "\r" | "\u2028" | "\u2029" 

/*Comentarios*/
Comment -> MultiLineComment | SingleLineComment
MultiLineComment -> "/*" (!"*/" SourceCharacter)* "*/"
SingleLineComment -> "||" (!LineTerminator SourceCharacter)*

/*Identificador*/
Identifier "Id" -> !ReservedWord [A-Za-z] IdentifierPart*
IdentifierPart -> [a-zA-Z0-9_]

/*Literales*/
BooleanLiteral -> TrueToken | FalseToken
InfinityLiteral -> [+]? InfinitoToken | [-] InfinitoToken 
NumericLiteral -> IntLiteral | FloatLiteral
IntLiteral -> [+-]? DecimalIntegerLiteral !"." 
FloatLiteral -> [+-]? DecimalIntegerLiteral "." DecimalDigit* | [+-]? "." DecimalDigit+ 
DecimalIntegerLiteral -> "0" | NonZeroDigit DecimalDigit*
DecimalDigit -> [0-9]
NonZeroDigit -> [1-9]
StringLiteral -> '"' DQString '"' 
DQString -> (!('"') SourceCharacter)*
CharLiteral -> "'" SQChar "'"
SQChar -> (!("'") SourceCharacter)?

/*Tipos de datos*/
PrimitiveTypesVar = IntToken | FloatToken | BooleanToken | CharToken | StringToken
TypesVar = PrimitiveTypesVar ("[" "]" ("[" "]")?)? 
    | PilaToken "<" _ PrimitiveTypesVar _ ">" 
    | ColaToken "<" _ PrimitiveTypesVar _ ">" 
    | ListaToken "<" _ PrimitiveTypesVar _ ">"    
ModePar = EntradaToken | SalidaToken | ESToken

/*Tokens*/

ReservedWord = VarToken | IfToken | ThenToken | ElseToken | EndIfToken | CaseOfToken | DefaultToken | 
  EndCaseToken | WhileToken | DoToken | EndWhileToken | RepeatToken | UntilToken | ForToken | 
  ToToken | IncToken | DownToToken | EndForToken | FunctionToken | ProcedureToken | EntradaToken | 
  SalidaToken | ESToken | IntToken | FloatToken | BooleanToken | CharToken | StringToken | 
  TrueToken | FalseToken | PilaToken | ColaToken | ListaToken | NotToken | ReturnToken | 
  PisoToken | TechoToken | InfinitoToken | PushToken | PopToken | PeekToken | EnqueueToken | 
  DequeueToken | FrontToken | IsEmptyToken | LengthToken | SizeToken | SwapToken | PrintToken | 
  ShowToken | CharAtToken | PowToken | SqrtToken

VarToken -> "var"            
IfToken -> "if"            
ThenToken -> "then"          
ElseToken -> "else"          
EndIfToken -> "endif"         
CaseOfToken -> "case of"       
DefaultToken -> "default"       
EndCaseToken -> "endcase"       
WhileToken -> "while"         
DoToken -> "do"            
EndWhileToken -> "endwhile"      
RepeatToken -> "repeat"        
UntilToken -> "until"         
ForToken -> "for"           
ToToken -> "to"             
IncToken -> "inc"            
DownToToken -> "downto"         
EndForToken -> "endfor"         
FunctionToken -> "function"       
ProcedureToken -> "procedure"      
TrueToken -> "true"           
FalseToken -> "false"          
NotToken -> "not"           
EntradaToken -> "E"              
SalidaToken -> "S"              
ESToken  -> "ES"             
IntToken -> "int"            
FloatToken -> "float"          
BooleanToken -> "boolean"        
CharToken -> "char"           
StringToken -> "string"          
PilaToken -> "pila"          
ColaToken -> "cola"          
ListaToken -> "lista"         
ReturnToken -> "return"         
PisoToken -> "piso"          
TechoToken -> "techo"         
InfinitoToken -> "infinito"      
PushToken -> "apilar"       
PopToken -> "desapilar"     
PeekToken -> "cima"          
EnqueueToken -> "encolar"       
DequeueToken -> "desencolar"    
FrontToken -> "frente"        
IsEmptyToken -> "isempty"       
LengthToken -> "len"           
SizeToken -> "size"         
SwapToken -> "swap"          
PrintToken -> "print"         
ShowToken -> "show"          
CharAtToken -> "charat"        
PowToken -> "pow"           
SqrtToken -> "sqrt"       

/*Expresiones*/
Expression = CharExpression | StringExpression | NumericExpression | BooleanExpression | ExpressionNoPrimitive
ExpressionNoPrimitive = VariableAccessExpression

VariableAccessExpression = ExistingVariable (!"[" | ArrayIndex)
ExistingVariable = Identifier !"("
IntVariable = VariableAccessExpression !"."
FloatVariable = VariableAccessExpression !"." 
BooleanVariable = VariableAccessExpression !"."
StringVariable = VariableAccessExpression !"."

CharVariable = VariableAccessExpression !"."
CharExpression = CharLiteral NotConcatenationString | CharVariable NotConcatenationString | CharAtFunction
CharAtFunction = VariableAccessExpression "." CharAtToken "(" _ IntExpression _ ")"

StringExpression = StringLiteral NotConcatenationString | StringVariable NotConcatenationString | StringConcatenation
NotConcatenationString = !(_ "+")
LeftHandStringConcatenation = NumericLiteral | CharLiteral | BooleanLiteral | StringLiteral | StringVariable | VariableAccessExpression
StringConcatenation = (LeftHandStringConcatenation (_ "+" _ LeftHandStringConcatenation)+ _ )

LeftHandSideNumericExpression = NumericLiteral | IntVariable | FloatVariable
  | SpecialNumericFunctions | VariablesNumericFunctions | "(" _ NumericExpression _ ")"
MultiplicativeNumericExpression = LeftHandSideNumericExpression (_ MultiplicativeOperator _ LeftHandSideNumericExpression)*
MultiplicativeOperator = "*" | "|" | "%"
NumericExpression = MultiplicativeNumericExpression (_ AdditiveOperator _ MultiplicativeNumericExpression)*
IntExpression = NumericExpression
SpecialNumericFunctions = FloorFunction | CeilingFunction | CastingIntFunction | InfinityLiteral | PowFunction | SqrtFunction
VariablesNumericFunctions = StringLengthFunction | ArrayLengthFunction
FloorFunction = PisoToken "(" _ NumericExpression _ ")"
CeilingFunction = TechoToken "(" _ NumericExpression _ ")" 
PowFunction = PowToken "(" NumericExpression "," NumericExpression ")" 
SqrtFunction = SqrtToken "(" NumericExpression ")" 
CastingIntFunction = "(" _ IntToken _ ")" _ NumericExpression 
ArrayLengthFunction = VariableAccessExpression "." LengthToken 
StringLengthFunction = VariableAccessExpression "." LengthToken 

AdditiveOperator = "+" | "-"
RelationalExpression = NumericExpression (_ RelationalOperator _ NumericExpression)+
RelationalOperator = "<=" | ">=" | "<") | ">")
LeftHandSideEqualityLogExpression = BooleanLiteral 
    | BooleanVariable
    | "(" _ BooleanExpression _ ")"
    | RelationalExpression
    | NotToken _ BooleanExpression
EqualityExpression = LeftHandSideEqualityLogExpression (_ EqualityOperator _ LeftHandSideEqualityLogExpression)*
    | NumericExpression (_ EqualityOperator _ NumericExpression)+
    | StringExpression (_ EqualityOperator _ (StringExpression))+
    | CharExpression (_ EqualityOperator _ (CharExpression))+
    | "(" _ EqualityExpression _ ")" 
EqualityOperator = "==" | "!="
LogicalANDExpression = EqualityExpression (_ LogicalANDOperator _ EqualityExpression)*
LogicalANDOperator = "and"
BooleanExpression = LogicalANDExpression (_ LogicalOROperator _ LogicalANDExpression)*
LogicalOROperator = "or"


CallExpression = SubProgramID Arguments
SubProgramID = Identifier "(" 
Arguments = _ (ArgumentList)? _ ")"
ArgumentList = Expression (_ "," _ Expression)* 
FunctionCall = CallExpression
ProcedureCallStatement = CallExpression

/*Sentencias*/
Statements = (Statement (_f Statement)* _f)?
Statement = AssignmentStatement | IfStatement | IterationStatement | SwitchStatement | ProcedureCallStatement | SpecialFunctions

AssignmentStatement = AssignableVariable _ AssignmentOperator _ (Expression | FunctionCall)

AssignableVariable = ExistingVariable (!"[" | ArrayIndex)
AssignmentOperator = "<-" !"<-"

IfStatement = IfToken _ "(" _ BooleanExpression _ ")" _ ThenToken _f Statements ElseToken _f Statements EndIfToken
| IfToken _ "(" _ BooleanExpression _ ")" _ ThenToken _f Statements EndIfToken 

SwitchStatement = CaseOfToken _ Expression _f
((BooleanLiteral | CharLiteral | StringLiteral | NumericLiteral) ":" _f Statements )*
(DefaultToken ":" _f Statements)? EndCaseToken

IterationStatement = RepeatToken _f Statements UntilToken _ "(" _ BooleanExpression _ ")"
  | WhileToken _ "(" _ BooleanExpression _ ")" _ DoToken _f
    Statements EndWhileToken
  | ForToken _ VarDeclarationFor _ FinalFor _ DoToken _f Statements EndForToken

VarDeclarationFor = IntVariable _ AssignmentOperator _ IntExpression 
FinalFor = ToToken _ IntExpression (_ IncToken _ IntLiteral)? 
| DownToToken _ IntExpression (_ IncToken _ IntLiteral)?

SpecialFunctions = SwapFunction | PrintFunction | ShowFunction
SwapFunction = SwapToken "(" _ VariableForSwap _ "," _ VariableForSwap _ ")"
VariableForSwap = ExistingVariable (!"[" | ArrayIndex) 
PrintFunction = PrintToken "(" _ Expression _ ")"
ShowFunction = ShowToken "(" _ Expression _ ")"

/*Variables Locales*/
VariableStatement = VarToken _f VariableDeclaration* 

/*Variables Globales*/
VariableGlobalStatement = VarToken _f "{" _f VariableDeclaration* "}" _f

VariableDeclaration = PrimitiveTypesVar _ IdentifierList _ (AssignmentOperator _ (
    CharExpression 
  | StringExpression 
  | BooleanExpression 
  | IntExpression 
  | NumericExpression))? _f
| PrimitiveTypesVar ArrayIndex _ IdentifierList _ (AssignmentOperator _ (
    ArrayLiteralChar 
  | ArrayLiteralString 
  | ArrayLiteralBoolean 
  | ArrayLiteralInt 
  | ArrayLiteralFloat ))? _f 
| PilaToken "<" _ PrimitiveTypesVar _ ">" _ IdentifierList _f
| ColaToken "<" _ PrimitiveTypesVar _ ">" _ IdentifierList _f 
| ListaToken "<" _ PrimitiveTypesVar _ ">" _ IdentifierList _f     

IdentifierList = Identifier _ (_","_ Identifier)*

ArrayIndex = ("[" _ IntExpression _ "]")+
ArrayLiteralInt = "[" ArrayLiteralInt (_ "," _ ArrayLiteralInt)* "]"
  | LiteralIntList
LiteralIntList = "[" IntLiteral (_ "," _ (IntLiteral))* "]" 
ArrayLiteralFloat = "[" ArrayLiteralFloat (_ "," _ ArrayLiteralFloat)* "]" 
  | LiteralFloatList
LiteralFloatList = "[" NumericLiteral (_ "," _ (NumericLiteral))* "]" 
ArrayLiteralChar = "[" ArrayLiteralChar (_ "," _ ArrayLiteralChar)* "]" 
  | LiteralCharList
LiteralCharList = "[" CharLiteral (_ "," _ (CharLiteral))* "]" 
ArrayLiteralString = "[" ArrayLiteralString (_ "," _ ArrayLiteralString)* "]" 
  | LiteralStringList
LiteralStringList = "[" StringLiteral (_ "," _ (StringLiteral))* "]" 
ArrayLiteralBoolean = "[" ArrayLiteralBoolean (_ "," _ ArrayLiteralBoolean)* "]" 
  | LiteralBooleanList
LiteralBooleanList = "[" BooleanLiteral (_ "," _ (BooleanLiteral))* "]" 


/*Subrutinas*/
SubProgramDeclaration = 
FunctionToken _ TypesVar _ SubProgramCreationID "(" _ FormalParameterList _ ")"
__ VariableStatement? 
"{" _f Statements ReturnStatement _f "}"
| 
ProcedureToken _ SubProgramCreationID "(" _ FormalParameterList _ ")"
__ VariableStatement? 
"{" _f Statements "}"

SubProgramCreationID = Identifier

FormalParameterList = (Parameter (__ "," __ Parameter)* )?
Parameter = ModePar _ TypesVar _ Identifier

/*Retorno*/
ReturnStatement = ReturnToken _ Expression